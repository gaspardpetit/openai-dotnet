// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using OpenAI;

namespace OpenAI.Responses
{
    public readonly partial struct InternalIncludable : IEquatable<InternalIncludable>
    {
        private readonly string _value;
        private const string FileSearchCallResultsValue = "file_search_call.results";
        private const string MessageInputImageImageUrlValue = "message.input_image.image_url";
        private const string ComputerCallOutputOutputImageUrlValue = "computer_call_output.output.image_url";
        private const string ReasoningEncryptedContentValue = "reasoning.encrypted_content";
        private const string CodeInterpreterCallOutputsValue = "code_interpreter_call.outputs";

        public InternalIncludable(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

		// <GP> made public 
		public static InternalIncludable FileSearchCallResults { get; } = new InternalIncludable(FileSearchCallResultsValue);

		public static InternalIncludable MessageInputImageImageUrl { get; } = new InternalIncludable(MessageInputImageImageUrlValue);

		public static InternalIncludable ComputerCallOutputOutputImageUrl { get; } = new InternalIncludable(ComputerCallOutputOutputImageUrlValue);

		public static InternalIncludable ReasoningEncryptedContent { get; } = new InternalIncludable(ReasoningEncryptedContentValue);

		public static InternalIncludable CodeInterpreterCallOutputs { get; } = new InternalIncludable(CodeInterpreterCallOutputsValue);
		// </GP>

		public static bool operator ==(InternalIncludable left, InternalIncludable right) => left.Equals(right);

        public static bool operator !=(InternalIncludable left, InternalIncludable right) => !left.Equals(right);

        public static implicit operator InternalIncludable(string value) => new InternalIncludable(value);

        public static implicit operator InternalIncludable?(string value) => value == null ? null : new InternalIncludable(value);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is InternalIncludable other && Equals(other);

        public bool Equals(InternalIncludable other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        public override string ToString() => _value;
    }
}
